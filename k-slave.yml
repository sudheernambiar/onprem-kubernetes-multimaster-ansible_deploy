---
- name: "Install k8s master"
  hosts: all
  vars_files: 
    - vars/slave-variables
    - vars/host_values
  tasks:
#Update packages and install needed
    - name: "Ready with kubernetes repo"
      copy:
        src: templates/kubernetes.repo
        dest: /etc/yum.repos.d/kubernetes.repo

    - name: "Install yum-utils"
      yum:
        name: yum-utils
        state: latest
        update_cache: True

    - name: add repos to docker
      shell:
        cmd: 'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'

    - name: rp_filter
      shell:
        cmd: 'echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter'


    - name: "Update all packages"
      yum:
        name: "*"
        state: present
        update_cache: true
        
    - name: " {{ item.name }} install packages"
      yum:
        name: "{{ item.name }}"
        state: latest
        update_cache: True

      when: item.required == True
      loop: "{{ packages }}"

#Start and enable docker and kubelet
    - name: "Start and enable keep alive and ha proxy"
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: replace line
      lineinfile:
        path: /usr/lib/systemd/system/docker.service
        regexp: '^(.*)ExecStart=(.*)$'
        line: 'ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd'
        backrefs: yes

    - name: "Create environment"
      file:
        path: /etc/systemd/system/kubelet.service.d/
        owner: root
        group: root
        state: directory
        mode: '0755'

    - name: memory and accounting
      shell:
        cmd: 'echo -e "[Service]\nCPUAccounting=true\nMemoryAccounting=true" > /etc/systemd/system/kubelet.service.d/11-cgroups.conf'



#NTP update
    - name: "NTP Date to crone"
      cron:
        name: "Time Update"
        minute: "*"
        job: "ntpdate time.apple.com"

#Disable SE Linux
    - name: "disable SELinux"
      selinux:
        state: disabled
      register: sestatus


#Add hosts file contents
    - name: "Create copy the content"
      template: 
        src: templates/remote_hosts.tmpl 
        dest: /etc/hosts
        mode: 644
        owner: root
        group: root
        backup: yes

# Add firewall rules
    - name: "implement rules"
      firewalld:
        port: "{{item.port}}/{{item.proto}}"
        permanent: yes
        state: enabled
      loop: "{{ m_ports }}"

#Do a reboot
    - name: "reboot"
      reboot:
      when: sestatus.changed == true

#Wait for the server to boot back
    - name: "Wait for server to restart"
      local_action:
        module: wait_for
          host={{ inventory_hostname }}
          port=22
          delay=10
          timeout=60
      when: sestatus.changed == true

#Clean old kernels
    - name: "Cleanup old kernels"
      command: 'package-cleanup --oldkernels --count=1'

# Enable modprob br_netfilter and forward rules
    - name: "modprob br_netfilter and forward rules"
      shell:
        cmd: 'modprobe br_netfilter'
    - shell:
        cmd: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
    - shell:
        cmd: "echo '1' > /proc/sys/net/ipv4/ip_forward"

#Start and enable docker and kubelet
    - name: "Start and enable keep alive and ha proxy"
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: "delete Containerd toml"
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: "restart the containerd"
      systemd:
        name: containerd"
        state: restarted
        enabled: yes

    - name: deploy the slave connection string
      command: 'sh slave_string.sh'

    - name: "ip table rule1"
      shell:
        cmd: 'iptables -D  INPUT -j REJECT --reject-with icmp-host-prohibited'

    - name: "ip table rule2"
      shell:
        cmd: 'iptables -D  FORWARD -j REJECT --reject-with icmp-host-prohibited'
